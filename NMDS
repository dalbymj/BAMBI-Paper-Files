#install.packages("ggplot2")
library(ggplot2)
#install.packages("vegan")
library(vegan)
#install.packages("dplyr")
library(dplyr)

# ============================================================
# Plotting significant taxa and environmental variables on an NMDS plot using ggplot2
# by Umer Zeeshan Ijaz (http://userweb.eng.gla.ac.uk/umer.ijaz)
# Code from http://userweb.eng.gla.ac.uk/umer.ijaz/bioinformatics/ecological.html
# =============================================================

# NMDS plot for time point 1 (samples from <10 days of age)

# First merge, select, and filter the data into the correct format

# Set the working directory to import the metadata
setwd("C:/Users/dalby/OneDrive/Documents/BAMBI/Test data")
# Import the recoded metadata
meta_data <- read.csv("recoded_metadata 18.09.2018.csv", header=TRUE, sep=",", strip.white = TRUE, na.strings=c("NR", "NA", "?")) 
# Remove the first colomn of numbers that are added when importing .csv files
meta_data <- meta_data[c(2:ncol(meta_data))]

# Reanme the Treament factors Control and Probiotic as "Control" and "Bif/Lacto"
levels(meta_data$Treatment) <- c("Control", "Bif/Lacto")

# Set the working directory to import the sequence data file
setwd("C:/Users/dalby/OneDrive/Documents/BAMBI/All Plate Files")
# Import the normalised sequence data
seq_data <- read.csv("mergedplates_transposed_subsampled.csv", header=TRUE, sep=",", strip.white = TRUE, na.strings=c("NR", "NA", "?"))
# Remove the first two columns from this file
seq_data1 <- seq_data[c(2:ncol(seq_data))]

# Merge the sequence and metadata together useing the shared Lane_ID colulmn.
prop_all_metadata_merged <- merge(meta_data,
                                  seq_data1,
                                  by="Lane_ID")

# Select data
abund <- dplyr::select(filter(prop_all_metadata_merged,
                              sample_age %in% c(2)), # Select only rows from Time point 1
                       c(Treatment, # Selet the Treatment column
                         Acinetobacter:ncol(prop_all_metadata_merged))) # Select all sequence columns

# Remove any rows that contain missing values
abund <- na.omit(abund, cols=Acinetobacter:ncol(prop_all_metadata_merged))
# Remove any columns with a sum total of 0
abund <- abund[, colSums(abund != 0) > 0]
#abund <- abund[rowSums(abund[, -(1:5)]) > 0, ]

# Select sequence data
abund_table <- dplyr::select(filter(abund),
                             c(2:ncol(abund)))

# Select metadata
meta_table2 <- dplyr::select(filter(abund),
                            c(Treatment))

#===============================================================================================================
# Create bv.step function to use later
# Code sourced from http://userweb.eng.gla.ac.uk/umer.ijaz/bioinformatics/ecological.html

# This R script is an extension of vegan library's bioenv()
# function and uses the bio.env() and bio.step() of
#	http://menugget.blogspot.co.uk/2011/06/clarke-and-ainsworths-bioenv-and-bvstep.html
#	The original author suggested these functions to overcome
#	the inflexibility of the bioenv() function which uses
#	a similarity matrix based on normalized "euclidean" distance.
# The new functions are given below and implement the following algorithms: 
# Clarke, K. R & Ainsworth, M. 1993. A method of linking multivariate community structure to environmental variables. Marine Ecology Progress Series, 92, 205-219.
# Clarke, K. R., Gorley, R. N., 2001. PRIMER v5: User Manual/Tutorial. PRIMER-E, Plymouth, UK.
# Clarke, K. R., Warwick, R. M., 2001. Changes in Marine Communities: An Approach to Statistical Analysis and Interpretation, 2nd edition. PRIMER-E Ltd, Plymouth, UK.
# Clarke, K. R., Warwick, R. M., 1998. Quantifying structural redundancy in ecological communities. Oecologia, 113:278-289. 

bv.step <- function(fix.mat, var.mat, 
                    fix.dist.method="gower", var.dist.method="euclidean", correlation.method="spearman",
                    scale.fix=FALSE, scale.var=TRUE,
                    max.rho=0.95,
                    min.delta.rho=0.001,
                    random.selection=TRUE,
                    prop.selected.var=0.2,
                    num.restarts=10,
                    var.always.include=NULL,
                    var.exclude=NULL,
                    output.best=10
){
  
  if(dim(fix.mat)[1] != dim(var.mat)[1]){stop("fixed and variable matrices must have the same number of rows")}
  if(sum(var.always.include %in% var.exclude) > 0){stop("var.always.include and var.exclude share a variable")}
  require(vegan)
  
  if(scale.fix){fix.mat<-scale(fix.mat)}else{fix.mat<-fix.mat}
  if(scale.var){var.mat<-scale(var.mat)}else{var.mat<-var.mat}
  
  fix.dist <- vegdist(as.matrix(fix.mat), method=fix.dist.method)
  
  #an initial removal phase
  var.dist.full <- vegdist(as.matrix(var.mat), method=var.dist.method)
  full.cor <- suppressWarnings(cor.test(fix.dist, var.dist.full, method=correlation.method))$estimate
  var.comb <- combn(1:ncol(var.mat), ncol(var.mat)-1)
  RES <- data.frame(var.excl=rep(NA,ncol(var.comb)), n.var=ncol(var.mat)-1, rho=NA)
  for(i in 1:dim(var.comb)[2]){
    var.dist <- vegdist(as.matrix(var.mat[,var.comb[,i]]), method=var.dist.method)
    temp <- suppressWarnings(cor.test(fix.dist, var.dist, method=correlation.method))
    RES$var.excl[i] <- c(1:ncol(var.mat))[-var.comb[,i]]
    RES$rho[i] <- temp$estimate
  }
  delta.rho <- RES$rho - full.cor
  exclude <- sort(unique(c(RES$var.excl[which(abs(delta.rho) < min.delta.rho)], var.exclude)))
  
  if(random.selection){
    num.restarts=num.restarts
    prop.selected.var=prop.selected.var
    prob<-rep(1,ncol(var.mat))
    if(prop.selected.var< 1){
      prob[exclude]<-0
    }
    n.selected.var <- min(sum(prob),prop.selected.var*dim(var.mat)[2])
  } else {
    num.restarts=1
    prop.selected.var=1  
    prob<-rep(1,ncol(var.mat))
    n.selected.var <- min(sum(prob),prop.selected.var*dim(var.mat)[2])
  }
  
  RES_TOT <- c()
  for(i in 1:num.restarts){
    step=1
    RES <- data.frame(step=step, step.dir="F", var.incl=NA, n.var=0, rho=0)
    attr(RES$step.dir, "levels") <- c("F","B")
    best.comb <- which.max(RES$rho)
    best.rho <- RES$rho[best.comb]
    delta.rho <- Inf
    selected.var <- sort(unique(c(sample(1:dim(var.mat)[2], n.selected.var, prob=prob), var.always.include)))
    while(best.rho < max.rho & delta.rho > min.delta.rho & RES$n.var[best.comb] < length(selected.var)){
      #forward step
      step.dir="F"
      step=step+1
      var.comb <- combn(selected.var, RES$n.var[best.comb]+1, simplify=FALSE)
      if(RES$n.var[best.comb] == 0){
        var.comb.incl<-1:length(var.comb)
      } else {
        var.keep <- as.numeric(unlist(strsplit(RES$var.incl[best.comb], ",")))
        temp <- NA*1:length(var.comb)
        for(j in 1:length(temp)){
          temp[j] <- all(var.keep %in% var.comb[[j]]) 
        }
        var.comb.incl <- which(temp==1)
      }
      
      RES.f <- data.frame(step=rep(step, length(var.comb.incl)), step.dir=step.dir, var.incl=NA, n.var=RES$n.var[best.comb]+1, rho=NA)
      for(f in 1:length(var.comb.incl)){
        var.incl <- var.comb[[var.comb.incl[f]]]
        var.incl <- var.incl[order(var.incl)]
        var.dist <- vegdist(as.matrix(var.mat[,var.incl]), method=var.dist.method)
        temp <- suppressWarnings(cor.test(fix.dist, var.dist, method=correlation.method))
        RES.f$var.incl[f] <- paste(var.incl, collapse=",")
        RES.f$rho[f] <- temp$estimate
      }
      
      last.F <- max(which(RES$step.dir=="F"))
      RES <- rbind(RES, RES.f[which.max(RES.f$rho),])
      best.comb <- which.max(RES$rho)
      delta.rho <- RES$rho[best.comb] - best.rho 
      best.rho <- RES$rho[best.comb]
      
      if(best.comb == step){
        while(best.comb == step & RES$n.var[best.comb] > 1){
          #backward step
          step.dir="B"
          step <- step+1
          var.keep <- as.numeric(unlist(strsplit(RES$var.incl[best.comb], ",")))
          var.comb <- combn(var.keep, RES$n.var[best.comb]-1, simplify=FALSE)
          RES.b <- data.frame(step=rep(step, length(var.comb)), step.dir=step.dir, var.incl=NA, n.var=RES$n.var[best.comb]-1, rho=NA)
          for(b in 1:length(var.comb)){
            var.incl <- var.comb[[b]]
            var.incl <- var.incl[order(var.incl)]
            var.dist <- vegdist(as.matrix(var.mat[,var.incl]), method=var.dist.method)
            temp <- suppressWarnings(cor.test(fix.dist, var.dist, method=correlation.method))
            RES.b$var.incl[b] <- paste(var.incl, collapse=",")
            RES.b$rho[b] <- temp$estimate
          }
          RES <- rbind(RES, RES.b[which.max(RES.b$rho),])
          best.comb <- which.max(RES$rho)
          best.rho<- RES$rho[best.comb]
        }
      } else {
        break()
      }
      
    }
    
    RES_TOT <- rbind(RES_TOT, RES[2:dim(RES)[1],])
    print(paste(round((i/num.restarts)*100,3), "% finished"))
  }
  
  RES_TOT <- unique(RES_TOT[,3:5])
  
  
  if(dim(RES_TOT)[1] > output.best){
    order.by.best <- RES_TOT[order(RES_TOT$rho, decreasing=TRUE)[1:output.best],]
  } else {
    order.by.best <-  RES_TOT[order(RES_TOT$rho, decreasing=TRUE), ]
  }
  rownames(order.by.best)<-NULL
  
  order.by.i.comb <- c()
  for(i in 1:length(selected.var)){
    f1 <- which(RES_TOT$n.var==i)
    f2 <- which.max(RES_TOT$rho[f1])
    order.by.i.comb <- rbind(order.by.i.comb, RES_TOT[f1[f2],])
  }
  rownames(order.by.i.comb)<-NULL
  
  if(length(exclude)<1){var.exclude=NULL} else {var.exclude=exclude}
  out <- list(
    order.by.best=order.by.best,
    order.by.i.comb=order.by.i.comb,
    best.model.vars=paste(colnames(var.mat)[as.numeric(unlist(strsplit(order.by.best$var.incl[1], ",")))], collapse=","),
    best.model.rho=order.by.best$rho[1],
    var.always.include=var.always.include,
    var.exclude=var.exclude
  )
  out
  
}
#===============================================================================================================

# Define parameter commants (other options are available for each one)
cmethod<-"pearson" #Correlation method to use: pearson, spearman, kendall
fmethod<-"bray" #Fixed distance method: euclidean, manhattan, gower, altGower, canberra, bray, kulczynski, morisita,horn, binomial, and cao
vmethod<-"bray" #Variable distance method: euclidean, manhattan, gower, altGower, canberra, bray, kulczynski, morisita,horn, binomial, and cao
nmethod<-"bray" #NMDS distance method:  euclidean, manhattan, gower, altGower, canberra, bray, kulczynski, morisita,horn, binomial, and cao

# Create the command to find the top 10 genus driving the separation of samples.
res.bv.step.biobio <- bv.step(wisconsin(abund_table),
                              wisconsin(abund_table), 
                              fix.dist.method=fmethod,
                              var.dist.method=vmethod,
                              correlation.method=cmethod,
                              scale.fix=FALSE,
                              scale.var=FALSE, 
                              max.rho=0.95,
                              min.delta.rho=0.001,
                              random.selection=TRUE,
                              prop.selected.var=0.3,
                              num.restarts=10,
                              output.best=10,
                              var.always.include=NULL) 

res.bv.step.biobio
# WARNINGS: These refer to empty rows and can be ignored.
# Sub-samplING the community matrix in bv.step to only include a subset of genus
# means there will be cases when the "abund_table" will have empty rows,
# especially when we are selecting only 10 genus.


# Find the 10 best subset of genus driving the separation of samples
taxaNames<-colnames(abund_table)
bestTaxaFit <-""
for(i in (1:length(res.bv.step.biobio$order.by.best$var.incl)))
{
  bestTaxaFit[i] <- paste(paste(taxaNames[as.numeric(unlist(strsplit(res.bv.step.biobio$order.by.best$var.incl[i],
                                                                   split = ",")))],
                                                                   collapse = ' + '),
                                                                   " = ",
                                                                   res.bv.step.biobio$order.by.best$rho[i],
                                                                   sep = "")
}

# Select the column (genus) names of the top ten genus
bestTaxaFit <- data.frame(bestTaxaFit)
colnames(bestTaxaFit) <- "Best combination of taxa with similarity score"
bestTaxaFit

# Generate the NMDS plot
MDS_res = metaMDS(abund_table,
                  distance = nmethod, #bray, euclidean, manhattan, gower, altGower, canberra, bray, kulczynski, morisita,horn, binomial, and cao
                  k = 3, # Set the number of dimensions
                  smin = 0.0001, # 0.0001 is the default
                  sfgrmin = 0.0000001, # 0.0000001 is the default
                  sratmax = 0.99999, # 0.99999 is the default
                  try = 200, # Minimum number of random starts
                  maxit = 1000, # Maximum number of random starts
                  trymax = 1000, # Number of attempts at calculating the NMDS plot to find the best one
                  plot = TRUE, # TRUE shows the plots developing as the code is running.
                  engine = "monoMDS")
MDS_res

# Test the significance of the bacterial genus in the NMDS plot
bio.keep <- as.numeric(unlist(strsplit(res.bv.step.biobio$order.by.best$var.incl[1], ",")))
bio.fit <- envfit(MDS_res,
                  abund_table[,bio.keep,drop=F],
                  perm = 999)
bio.fit

# Calculate the vectors for the arrows and genus names to put on the NMDS plot
vec.sp.df <- as.data.frame(bio.fit$vectors$arrows*sqrt(bio.fit$vectors$r))
vec.sp.df
vec.sp.df$species<-rownames(vec.sp.df)
vec.sp.df

# Make a dataframe of the coordinates to draw the NMDS plot
df <- scores(MDS_res)
df
df <- as.data.frame(df)
df

# Add Treatment group information to the dataframe
df <- data.frame(df, Treatment=meta_table2[,1])
df

# Get the vectors for bio.fit
df_biofit<-scores(bio.fit, display=c("vectors"))
df_biofit<-df_biofit*vegan:::ordiArrowMul(df_biofit)
df_biofit<-as.data.frame(df_biofit)
df_biofit

# Limit genus shown to only those with significant p-values
# This is to avoid overcrowding the NMDS plot with overlapping names
A <- as.list(bio.fit$vectors)
# Create a dataframe with the arrows and p-values
pvals <- as.data.frame(A$pvals)
arrows <- as.data.frame(A$arrows*sqrt(A$r))
sig_arrows <- cbind(arrows, pvals)
# Subset the dataframe to only those with p<0.01
Genus <- subset(sig_arrows, pvals < 0.01)
Genus

#Create plot
p <- ggplot(data=df,
            aes(NMDS1,
                NMDS2)) +
     geom_point(aes(colour = Treatment,
                    shape = Treatment)) +
     scale_colour_manual(name = "Treatment",
                         labels = c("Control",
                                    "Bif/Lacto"),
                         values = c("red1",
                                    "steelblue3")) +   
     scale_shape_manual(name = "Treatment",
                        labels = c("Control",
                                   "Bif/Lacto"),
                        values = c(22, 24)) +
     scale_x_continuous(expand = c(0, 0),
                        breaks = c(-1.5, -1, -0.5, 0, 0.5, 1),
                        limits = c(-1.8, 1.1)) +
     #labs(title="<10 days of age") +
     theme(legend.position = c(0.17, 0.87), # Difine the position of the legend
           legend.title = element_blank(), # Remove the legend title
           legend.text = element_text(size = 7), # Define the size of the legend text
           legend.background = element_blank(), # Remove the grey background
           legend.margin = margin(0, 6, 0, 0), # Defined the legend margins
           legend.key = element_blank(), # Remove the background from around the legend
           legend.box.background = element_rect(colour = "grey"), # Draw a grew rectangle around the legend 
           panel.background = element_blank(), # Remove the grey plot background
           panel.border = element_blank(), # Remove the plot border
           panel.grid.major = element_blank(), # Remove the major plot gridlines
           panel.grid.minor = element_blank(), # Remove the minor plot gridlines
           axis.text.x = element_text(size=7, angle = 0, hjust = .5), # Define the size and orientation of x axis labels
           axis.text.y = element_text(size=7), # Define the y axis label text size
           axis.title.x = element_text(size = 7), # Define the x axis title font size
           axis.title.y = element_text(size=7), # Define the y axis title font size
           # Add back the x and y axis lines
           axis.line = element_line(size = 0.35, # Define thinkness
                                    linetype = "solid", # Define style
                                    colour = "black"), # Define colour
           aspect.ratio = 1) + # Set the aspect ration of the plot
  # Draw genus arrows
  geom_segment(data = Genus, # This defineds the length of the arrow
               aes(x = 0,
                   y = 0,
                   xend = NMDS1,
                   yend = NMDS2),
               arrow = arrow(length = unit(0.2, "cm")), # Define the length of the arrow head
               color = "black", # Define the colour of the arrows
               alpha = .7) + # Define the thickness of the arrows
  # Draw genus names
  geom_text(data = as.data.frame(Genus*1.5), # (Genus*1.5) moves the names 1.5 x the length of the arrow.
            aes(NMDS1,
                NMDS2,
                label = rownames(Genus)),
            fontface = "italic", # Make genus names italic
            color = "black", # Make genus names black
            size = 2.5, # Define the size of the genus names
            alpha = 1) 

# Print the plot
p

# Set the file to save the figure into
setwd("C:/Users/dalby/OneDrive/Documents/BAMBI/R code for ecological data analysis")
# Set the saved pdf file name and define the size of the plot
pdf("NMDS BAMBI TP2 30.11.2018.pdf", width=3.2, height=3.2)
# pring(p) saves the figure into a file
print(p)
dev.off()


